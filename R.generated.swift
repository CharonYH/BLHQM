//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `FZKTJW.TTF`.
    static let fzktjwttF = Rswift.FileResource(bundle: R.hostingBundle, name: "FZKTJW", pathExtension: "TTF")
    /// Resource file `方正粗圆简体.ttf`.
    static let 方正粗圆简体Ttf = Rswift.FileResource(bundle: R.hostingBundle, name: "方正粗圆简体", pathExtension: "ttf")

    /// `bundle.url(forResource: "FZKTJW", withExtension: "TTF")`
    static func fzktjwttF(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.fzktjwttF
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "方正粗圆简体", withExtension: "ttf")`
    static func 方正粗圆简体Ttf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.方正粗圆简体Ttf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 2 fonts.
  struct font: Rswift.Validatable {
    /// Font `FZKTJW--GB1-0`.
    static let fzktjwgb10 = Rswift.FontResource(fontName: "FZKTJW--GB1-0")
    /// Font `FZY4JW--GB1-0`.
    static let fzy4JWGB10 = Rswift.FontResource(fontName: "FZY4JW--GB1-0")

    /// `UIFont(name: "FZKTJW--GB1-0", size: ...)`
    static func fzktjwgb10(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fzktjwgb10, size: size)
    }

    /// `UIFont(name: "FZY4JW--GB1-0", size: ...)`
    static func fzy4JWGB10(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: fzy4JWGB10, size: size)
    }

    static func validate() throws {
      if R.font.fzktjwgb10(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FZKTJW--GB1-0' could not be loaded, is 'FZKTJW.TTF' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.fzy4JWGB10(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'FZY4JW--GB1-0' could not be loaded, is '方正粗圆简体.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 16 images.
  struct image {
    /// Image `banner_bg_yellow`.
    static let banner_bg_yellow = Rswift.ImageResource(bundle: R.hostingBundle, name: "banner_bg_yellow")
    /// Image `blh_cell_img1`.
    static let blh_cell_img1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "blh_cell_img1")
    /// Image `blh_cell_img`.
    static let blh_cell_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "blh_cell_img")
    /// Image `blh_right_narrow`.
    static let blh_right_narrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "blh_right_narrow")
    /// Image `navigation_back_black`.
    static let navigation_back_black = Rswift.ImageResource(bundle: R.hostingBundle, name: "navigation_back_black")
    /// Image `tabbar_course_normal`.
    static let tabbar_course_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_course_normal")
    /// Image `tabbar_course_selected`.
    static let tabbar_course_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_course_selected")
    /// Image `tabbar_daka_normal`.
    static let tabbar_daka_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_daka_normal")
    /// Image `tabbar_daka_selected`.
    static let tabbar_daka_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_daka_selected")
    /// Image `tabbar_home_normal`.
    static let tabbar_home_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_normal")
    /// Image `tabbar_home_selected`.
    static let tabbar_home_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_home_selected")
    /// Image `tabbar_me_normal`.
    static let tabbar_me_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_me_normal")
    /// Image `tabbar_me_selected`.
    static let tabbar_me_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_me_selected")
    /// Image `tabbar_middlebulge_backImg`.
    static let tabbar_middlebulge_backImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_middlebulge_backImg")
    /// Image `tabbar_vip_normal`.
    static let tabbar_vip_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_vip_normal")
    /// Image `tabbar_vip_selected`.
    static let tabbar_vip_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabbar_vip_selected")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "banner_bg_yellow", bundle: ..., traitCollection: ...)`
    static func banner_bg_yellow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.banner_bg_yellow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blh_cell_img", bundle: ..., traitCollection: ...)`
    static func blh_cell_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blh_cell_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blh_cell_img1", bundle: ..., traitCollection: ...)`
    static func blh_cell_img1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blh_cell_img1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "blh_right_narrow", bundle: ..., traitCollection: ...)`
    static func blh_right_narrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.blh_right_narrow, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navigation_back_black", bundle: ..., traitCollection: ...)`
    static func navigation_back_black(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navigation_back_black, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_course_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_course_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_course_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_course_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_course_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_course_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_daka_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_daka_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_daka_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_daka_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_daka_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_daka_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_home_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_home_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_home_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_home_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_me_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_me_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_me_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_me_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_me_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_me_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_middlebulge_backImg", bundle: ..., traitCollection: ...)`
    static func tabbar_middlebulge_backImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_middlebulge_backImg, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_vip_normal", bundle: ..., traitCollection: ...)`
    static func tabbar_vip_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_vip_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tabbar_vip_selected", bundle: ..., traitCollection: ...)`
    static func tabbar_vip_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabbar_vip_selected, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
